type Account = record { owner : principal; subaccount : opt vec nat8 };
type BadFee = record { expected_fee : nat };
type CreatedInFuture = record { ledger_time : nat64 };
type GenericError = record { message : text; error_code : nat };
type HttpRequest = record { url : text; headers : vec record { text; text } };
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  upgrade : opt bool;
  status_code : nat16;
};
type InsufficientFunds = record { balance : nat };
type Result = variant { Ok : nat64; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_3 = variant { Ok : nat; Err : TransferError };
type Result_4 = variant { Ok : nat32; Err : text };
type Standard = record { url : text; name : text };
type TransferArgs = record {
  to : Account;
  fee : opt nat;
  memo : opt vec nat8;
  from_subaccount : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
};
type TransferError = variant {
  GenericError : GenericError;
  BadFee : BadFee;
  CreatedInFuture : CreatedInFuture;
  TooOld;
  InsufficientFunds : InsufficientFunds;
};
type Value = variant { 
  Nat : nat; 
  Int : int;
  Text : text;
  Blob : vec nat8;
  Array : vec Value;
  Map : vec record { text; Value };
};

// ICRC-2 Types
type ApproveArgs = record {
  from_subaccount : opt vec nat8;
  spender : Account;
  amount : nat;
  expected_allowance : opt nat;
  expires_at : opt nat64;
  fee : opt nat;
  memo : opt vec nat8;
  created_at_time : opt nat64;
};

type AllowanceChanged = record { current_allowance : nat };
type Expired = record { ledger_time : nat64 };
type ApproveError = variant {
  BadFee : BadFee;
  InsufficientFunds : InsufficientFunds;
  AllowanceChanged : AllowanceChanged;
  Expired : Expired;
  TooOld;
  CreatedInFuture : CreatedInFuture;
  GenericError : GenericError;
};

type TransferFromArgs = record {
  spender_subaccount : opt vec nat8;
  from : Account;
  to : Account;
  amount : nat;
  fee : opt nat;
  memo : opt vec nat8;
  created_at_time : opt nat64;
};

type InsufficientAllowance = record { allowance : nat };
type TransferFromError = variant {
  BadFee : BadFee;
  InsufficientFunds : InsufficientFunds;
  InsufficientAllowance : InsufficientAllowance;
  TooOld;
  CreatedInFuture : CreatedInFuture;
  GenericError : GenericError;
};

type AllowanceArgs = record {
  account : Account;
  spender : Account;
};

type Allowance = record {
  allowance : nat;
  expires_at : opt nat64;
};

type Result_ApproveError = variant { Ok : nat; Err : ApproveError };
type Result_TransferFromError = variant { Ok : nat; Err : TransferFromError };

// ICRC-21 Types
type Icrc21ConsentMessageMetadata = record {
  language : text;
  utc_offset_minutes : opt int16;
};

type Icrc21DeviceSpec = variant {
  GenericDisplay;
  LineDisplay : record {
    characters_per_line : nat16;
    lines_per_page : nat16;
  };
};

type Icrc21ConsentMessageSpec = record {
  metadata : Icrc21ConsentMessageMetadata;
  device_spec : opt Icrc21DeviceSpec;
};

type Icrc21ConsentMessageRequest = record {
  method : text;
  arg : vec nat8;
  user_preferences : Icrc21ConsentMessageSpec;
};

type Icrc21Page = record {
  lines : vec text;
};

type Icrc21ConsentMessage = variant {
  GenericDisplayMessage : text;
  LineDisplayMessage : record {
    pages : vec Icrc21Page;
  };
};

type Icrc21ConsentInfo = record {
  consent_message : Icrc21ConsentMessage;
  metadata : Icrc21ConsentMessageMetadata;
};

type Icrc21ErrorInfo = record {
  description : text;
};

type Icrc21Error = variant {
  UnsupportedCanisterCall : Icrc21ErrorInfo;
  ConsentMessageUnavailable : Icrc21ErrorInfo;
  InsufficientPayment : Icrc21ErrorInfo;
  GenericError : record { error_code : nat; description : text };
};

type Icrc21ConsentMessageResponse = variant {
  Ok : Icrc21ConsentInfo;
  Err : Icrc21Error;
};

// ICRC-3 Types
type GetBlocksRequest = record {
  start : nat;
  length : nat;
};

type GetBlocksResponse = record {
  first_index : nat;
  chain_length : nat64;
  certificate : opt vec nat8;
  blocks : vec Value;
  archived_blocks : vec ArchivedRange;
};

type ArchivedRange = record {
  start : nat;
  length : nat;
  callback : QueryBlockArchiveFn;
};

type QueryBlockArchiveFn = record {
  canister_id : principal;
  method : text;
};

type DataCertificate = record {
  certificate : vec nat8;
  hash_tree : vec nat8;
};

type GetArchivesRequest = record {
  from : opt principal;
};

type GetArchivesResult = record {
  canister_id : principal;
  start : nat;
  end : nat;
};

type BlockType = record {
  block_type : text;
  url : text;
};

// Original Transaction type (still needed for internal API compatibility)  
type Transaction = record {
  from : Account;
  to : Account;
  amount : nat64;
  fee : nat64;
  timestamp : nat64;
  memo : opt vec nat8;
};

// The crucial get_transactions types for KongSwap
type GetTransactionsRequest = record {
  start : nat;
  length : nat;
};

// ICRC-3 Transaction Types
type Icrc3Transaction = record {
  kind : text;
  mint : opt Icrc3Mint;
  burn : opt Icrc3Burn;
  transfer : opt Icrc3Transfer;
  approve : opt Icrc3Approve;
  timestamp : nat64;
};

type Icrc3Transfer = record {
  from : Account;
  to : Account;
  amount : nat;
  fee : opt nat;
  memo : opt vec nat8;
  created_at_time : opt nat64;
};

type Icrc3Mint = record {
  to : Account;
  amount : nat;
  memo : opt vec nat8;
  created_at_time : opt nat64;
};

type Icrc3Burn = record {
  from : Account;
  amount : nat;
  memo : opt vec nat8;
  created_at_time : opt nat64;
};

type Icrc3Approve = record {
  from : Account;
  spender : Account;
  amount : nat;
  expected_allowance : opt nat;
  expires_at : opt nat64;
  fee : opt nat;
  memo : opt vec nat8;
  created_at_time : opt nat64;
};

type GetTransactionsResponse = record {
  first_index : nat;
  log_length : nat64;
  transactions : vec Icrc3Transaction;
  archived_transactions : vec ArchivedTransactionRange;
};

type ArchivedTransactionRange = record {
  start : nat;
  length : nat;
  callback : QueryArchiveFn;
};

type QueryArchiveFn = record {
  canister_id : principal;
  method : text;
};

service : () -> {
  add_post : (
      text,
      vec record { text; vec nat8 },
      opt nat64,
      opt text,
      opt vec nat8,
    ) -> (Result);
  add_post_blob : (text, vec nat8) -> (Result_1);
  add_post_data : (text, opt text, opt vec nat8) -> ();
  commit_post : () -> (Result);
  edit_post : (nat64, text, vec record { text; vec nat8 }, text, opt text) -> (
      Result_1,
    );
  force_emergency_upgrade : () -> (bool);
  http_request : (HttpRequest) -> (HttpResponse) query;
  http_request_update : (HttpRequest) -> (HttpResponse);
  icrc1_balance_of : (Account) -> (nat) query;
  icrc1_decimals : () -> (nat8) query;
  icrc1_fee : () -> (nat) query;
  icrc1_metadata : () -> (vec record { text; Value }) query;
  icrc1_minting_account : () -> (opt Account) query;
  icrc1_name : () -> (text) query;
  icrc1_supported_standards : () -> (vec Standard) query;
  icrc1_symbol : () -> (text) query;
  icrc1_total_supply : () -> (nat) query;
  icrc1_transfer : (TransferArgs) -> (Result_3);
  icrc2_approve : (ApproveArgs) -> (Result_ApproveError);
  icrc2_allowance : (AllowanceArgs) -> (Allowance) query;
  icrc2_transfer_from : (TransferFromArgs) -> (Result_TransferFromError);
  icrc21_canister_call_consent_message : (Icrc21ConsentMessageRequest) -> (Icrc21ConsentMessageResponse);
  
  // ICRC-3 Methods
  get_transactions : (GetTransactionsRequest) -> (GetTransactionsResponse) query;
  icrc3_get_blocks : (GetBlocksRequest) -> (GetBlocksResponse) query;
  icrc3_get_archives : (GetArchivesRequest) -> (vec GetArchivesResult) query;
  icrc3_get_tip_certificate : () -> (opt DataCertificate) query;
  icrc3_supported_block_types : () -> (vec BlockType) query;
  
  link_cold_wallet : (nat64) -> (Result_1);
  prod_release : () -> (bool);
  propose_release : (text, text, vec nat8) -> (Result_4);
  set_emergency_release : (vec nat8) -> ();
  stable_mem_read : (nat64) -> (vec record { nat64; vec nat8 }) query;
  unlink_cold_wallet : () -> (Result_1);
}
